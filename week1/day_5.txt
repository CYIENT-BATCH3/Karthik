1.implement 4 type of data using formatted IO & 3 type of un formatted input
#include <stdio.h>
int main()
{
    int no1;            	//variable declaration
    char no2,b;		//variable declaration
    float no3;			//variable declaration
    long int no4;		//variable declaration
    printf("enter value:"); 	//enter the input
    scanf("\n%d",&no1);		//reading the input as address
    printf("enter value:");
    scanf("\n%c",&no2);		//reading the input as address
    printf("enter value:");
    scanf("\n%f",&no3);		//reading the input as address
    printf("enter value:");
    scanf("\n%li",&no4);	//reading the input as address
    printf("integer value: %d,\nchar: %c, \nfloat value: %f, \nlong integer value: %li",no1,no2,no3,no4);
    return 0;
}

2. calculate the area that has to cover
#include <stdio.h>  //header file
const pi = 3.141; 
int main()
{
    float area, radius;  //variable declaration
    printf("enter:");     
    scanf("%f",&radius);   //reading the value from user 
    area= pi *radius*radius;  //formula for area of circle 
    printf("the area to be covered is %4f",area);  //printing the output to user
    return 0;
}

3.take a 6 digit no as input from user the user and reverse the number.
#include <stdio.h>

int main()
{
  int num; 	     //variable declaraion
  printf("enter:"); //enter the input
  scanf("%d",&num);  //reading the input as address
  num&(1<<7)?printf("1"):printf("0");   //using bitwise operator AND and left shifting for printing the binary using printf statement
  num&(1<<6)?printf("1"):printf("0");	//using bitwise operator AND and left shifting for printing the binary using printf statement
  num&(1<<5)?printf("1"):printf("0");	//using bitwise operator AND and left shifting for printing the binary using printf statement
  num&(1<<4)?printf("1"):printf("0");	//using bitwise operator AND and left shifting for printing the binary using printf statement
  num&(1<<3)?printf("1"):printf("0");	//using bitwise operator AND and left shifting for printing the binary using printf statement
  num&(1<<2)?printf("1"):printf("0");	//using bitwise operator AND and left shifting for printing the binary using printf statement
  num&(1<<1)?printf("1"):printf("0");	//using bitwise operator AND and left shifting for printing the binary using printf statement
  num&1?printf("1"):printf("0");	//using bitwise operator AND printing the binary using printf statement
  return 0;
}