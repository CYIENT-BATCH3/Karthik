/// PIC18F458 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1H
#pragma config OSC = HS         // Oscillator Selection bits (HS oscillator)
#pragma config OSCS = OFF       // Oscillator System Clock Switch Enable bit (Oscillator system clock switch option is disabled (main oscillator is source))

// CONFIG2L
#pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOR = OFF        // Brown-out Reset Enable bit (Brown-out Reset disabled)
#pragma config BORV = 25        // Brown-out Reset Voltage bits (VBOR set to 2.5V)

// CONFIG2H
#pragma config WDT = OFF        // Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
#pragma config WDTPS = 128      // Watchdog Timer Postscale Select bits (1:128)

// CONFIG4L
#pragma config STVR = OFF       // Stack Full/Underflow Reset Enable bit (Stack Full/Underflow will not cause Reset)
#pragma config LVP = OFF        // Low-Voltage ICSP Enable bit (Low-Voltage ICSP disabled)

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (000200-001FFFh) not code protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) not code protected)
#pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) not code protected)
#pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) not code protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot Block (000000-0001FFh) not code protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000200-001FFFh) not write protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) not write protected)
#pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) not write protected)
#pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) not write protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block (000000-0001FFh) not write protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000200-001FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) not protected from Table Reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot Block (000000-0001FFh) not protected from Table Reads executed in other blocks)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <stdio.h>
#define _XTAL_FREQ 20000000           //setting frequency
#define ENABLE 1;             
#define DISABLE 0;
int led_stat;
enum modes{CONFIG_MODE = 0X80,NORMAL_MODE = 0X08};     //convert the configuration mode to normal mode
void System_init();        //declaring the functions
void CAN_init();                  //declaring the functions   
void Set_baudrate();           //declaring the functions in set bouderate
void CAN_write(int);        //declaring the functions can write
void mask();        //declaring the functions function can filter
void acc_filter();        //declaring the functions in filter
void CAN_read();     //declaring the can read function
void LED();
int frame[100];        //decalring the frames in array of 100
int main()
{
    System_init();           //calling the function intialization
    CAN_init();              ////calling the function in can intialization
    Set_baudrate();         ////calling the function in set bauderate
    mask();         //    calling the mask
    acc_filter();              //calling
    while(1)
    {
    if ((frame[8]==0xAA)&&(frame[9]==0xAA)&&(frame[10]==0xAA)&&(frame[11]==0xAA)&&(frame[12]==0xAA))     //cheeckig the congition in given require ment
    {
        PORTBbits.RB1 = 1;          //enable the bit
        led_stat =1;               //the condition will be true led will be glow
        CAN_write(led_stat);         //read the status for led
    }
    else
    {
        PORTBbits.RB1 = 0;    
        led_stat =0;                    //the condition will be false led off
        CAN_write(led_stat);
    }
    __delay_ms(2000);                 //delay for led glow in 2 sec
    }
}
void System_init()
{
    GIE = ENABLE;          //enable the global inturrept
    PEIE = ENABLE;         //enable the PEIE
}
void  CAN_init()
{
    TRISBbits.RB0 = 0;        //direction in ports
    TRISBbits.RB1 = 0;
    TRISBbits.RB3 = 1;     
    TRISBbits.RB2 = 0; //transmitting pin in MCU
    PORTBbits.RB0 = 0;
    PORTBbits.RB1 = 0;
    RXB0IP =1;
    RXB0IE=1;
}
void Set_baudrate()
{
    CANCON = CONFIG_MODE;
    while(CANSTAT != CONFIG_MODE);
    
    BRGCON1 = 0XC1;           // Synchronization Jump Width Time = 4 x TQ  //000001 = TQ = (2 x 2)/FOSC
    BRGCON2 = 0XAE;           //1 = Freely programmable//101 = Phase Segment 1 Time = 6 x TQ//110 = Propagation Time = 7 x TQ
    BRGCON3 = 0X45;           
    CIOCON = 0X20;
    CANCON = NORMAL_MODE;
}
void CAN_write(int led_stat )
{
     CANCON = NORMAL_MODE;
     while(!CANCON==0x08);
     TXB0SIDH = 0x00;                    //standard identifier high  
     TXB0SIDL = 0x08;             ////standard identifier low
     TXB0EIDH = 0x09;   //extended identifier in high
     TXB0EIDL = 0x32;    //extended identifier in low
     TXB0DLC = 0X08;     //data length
     TXB0D0  = 0X00;      //buffer 0
     TXB0D1  = 0X00;
     TXB0D2  = 0X00;
     TXB0D3  = led_stat;
     TXB0D4  = 0XFF;
     TXB0D5  = 0XFF;
     TXB0D6  = 0XFF;
     TXB0D7  = 0XFF;
     TXB0CON = 0X08;
    // CANCON = NORMAL_MODE;
     
}
void mask()      
{
    RXM0SIDH=0x00;         //mask
    RXM0SIDL=0x00;
    
}
void acc_filter()
{
    RXF0SIDH=0x00;          //filter
    RXF0SIDL=0x00;
}
void __interrupt()ISR1()        //interrupt in receiving is need
{
    
    if(RXB0IF==1)
    {
        RXB0IF=0;
      CAN_read();
    }
}
void CAN_read()        //can read function
{
    CANCON=0X0E;
   
   frame[0]=RXB0SIDH;      
   frame[1]=RXB0SIDL;
   frame[2]=RXB0EIDH;
   frame[3]=RXB0EIDL;
   frame[4]=RXB0DLC;
   frame[5]=RXB0D0;
   frame[6]=RXB0D1;
   frame[7]=RXB0D2;
   frame[8]=RXB0D3;
   frame[9]=RXB0D4;
   frame[10]=RXB0D5;
   frame[11]=RXB0D6;
   frame[12]=RXB0D7;
   RXB0CON=0x00;
   RXB0FUL=0;
}
